<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title></title>
    <description></description>
    <link>/</link>
    <atom:link href="/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sun, 24 Apr 2016 10:26:04 +0800</pubDate>
    <lastBuildDate>Sun, 24 Apr 2016 10:26:04 +0800</lastBuildDate>
    <generator>Jekyll v3.1.2</generator>
    
      <item>
        <title>git常用命令</title>
        <description>&lt;h2 id=&quot;markgit&quot;&gt;mark一些常用的git命令&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;由于最近开始玩Github了，所以在这里记录一下经常用到的git命令，主要为了自己方便查找也希望可以为阅读本文的人带来一点点便利，如有误欢迎指正。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;更详细可以参考《Git版本控制管理》，这是一本好书，不过里面的很多目前我还用不到。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;table border=&quot;1&quot;&gt;
	&lt;tr&gt;
	  &lt;td&gt;git remote add upstream https://github.com/xxxxxx/xxxxxx.git&lt;/td&gt;
	  &lt;td&gt;新建分支并存放别人的repository&lt;/td&gt;
	&lt;/tr&gt;   
	&lt;tr&gt;
	  &lt;td&gt;git clone https://github.com/answershuto/answershuto.github.io&lt;/td&gt;
	  &lt;td&gt;克隆到本地&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;git status&lt;/td&gt;
	  &lt;td&gt;查看状态&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;git log&lt;/td&gt;
	  &lt;td&gt;查看git提交日志&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;git add .&lt;/td&gt;
	  &lt;td&gt;添加所有本地文件&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;git add filename&lt;/td&gt;
	  &lt;td&gt;添加某一个文件&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;git remove  fileName&lt;/td&gt;
	  &lt;td&gt;删除文件&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;git push&lt;/td&gt;
	  &lt;td&gt;提交到服务器上&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;git pull origin master&lt;/td&gt;
	  &lt;td&gt;从服务器上拉取信息&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;git branch -a&lt;/td&gt;
	  &lt;td&gt;查看所有分支&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;git branch -r &lt;/td&gt;
	  &lt;td&gt;查看所有远程分支&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;git branch -d XXX&lt;/td&gt;
	  &lt;td&gt;删除分支&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;git branch XXX&lt;/td&gt;
	  &lt;td&gt;新建分支&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
	  &lt;td&gt;git checkout XXX&lt;/td&gt;
	  &lt;td&gt;切换分支&lt;/td&gt;
	&lt;/tr&gt;
&lt;/table&gt;

</description>
        <pubDate>Sat, 23 Apr 2016 23:32:00 +0800</pubDate>
        <link>/jekyll/update/2016/04/23/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4.html</link>
        <guid isPermaLink="true">/jekyll/update/2016/04/23/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4.html</guid>
        
        <category>git</category>
        
        
        <category>jekyll</category>
        
        <category>update</category>
        
      </item>
    
      <item>
        <title>我对javascript继承的理解</title>
        <description>&lt;p&gt;记录一下学习js继承的学习心得，有误之处欢迎指正。&lt;/p&gt;

&lt;p&gt;javascript中的继承主要通过原型链的方式来实现，简单地说也就是对象a所指向的原型A是原型B的一个实例b，即B的实例是a所指向的原型。&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;借用构造函数&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;img src=&quot;/img/jsInherit/parasiticCombination.jpg&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;这种继承方式的弊端显而易见，数据以及方法都必须定义在基类的构造函数中，在派生类中用call改变执行环境时，基类的数据以及方法会生成在派生类中，即this。但是如果在基类的原型中定义的方法以及数据，就无法在派生类中得到继承。将所有的方法以及数据都定义在构造函数中，也就没有什么封装可言了。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;原型式继承&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;img src=&quot;/img/jsInherit/prototype.jpg&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;原型继承主要通过Object.create()方法，构建一个新的派生类对象并使其原型指向基类。其函数内容可以描述为&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function object(o){
	function F();
	F.prototype = 0;
	return F;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;这种方法使得基类中的引用变量得到了共用，可以使得对象保持相似。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;组合继承&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;js里面最常用的继承方法&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;上代码：&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;img src=&quot;/img/jsInherit/combination.jpg&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;在派生类中调用基类的构造函数，如果不那么做会导致所有基类的成员及方法都属于原型，那么这些成员和方法都是“公有”的，也就是所有的派生类都指向同一块内存（这里就是原型），导致某一个派生类对象修改了基类中的成员数据会导致所有派生类的数据都改变。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;针对上述这个问题，在派生类中用call来执行基类的构造函数，使得基类的执行环境处于派生类，即this的指向改变。这样可以有效地防止出现由于基类对象作为原型导致基类对象中的引用对象产生的派生类实例所有引用对象都指向同一个对象的问题。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;p&gt;组合式继承也有自己的弊端，在创建基类实例以及在派生类的构造函数中会两次调用基类的构造函数，第二次会覆盖第一次掉用时创建的对象及方法。&lt;/p&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;在派生类的构造函数中初始化派生实例自己的成员&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-3&quot;&gt;寄生式继承&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;img src=&quot;/img/jsInherit/parasitic.jpg&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;寄生式继承相当于克隆了基类对象。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-4&quot;&gt;寄生组合式继承&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;img src=&quot;/img/jsInherit/parasiticCombination.jpg&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;p&gt;由于组合式继承会在创建时两次掉用基类的构造函数构造基类的对象，所以综合寄生式继承，产生了寄生组合式继承。&lt;/p&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

</description>
        <pubDate>Wed, 20 Apr 2016 22:31:00 +0800</pubDate>
        <link>/jekyll/update/2016/04/20/%E6%88%91%E5%AF%B9javascript%E7%BB%A7%E6%89%BF%E7%9A%84%E7%90%86%E8%A7%A3.html</link>
        <guid isPermaLink="true">/jekyll/update/2016/04/20/%E6%88%91%E5%AF%B9javascript%E7%BB%A7%E6%89%BF%E7%9A%84%E7%90%86%E8%A7%A3.html</guid>
        
        <category>javascript</category>
        
        
        <category>jekyll</category>
        
        <category>update</category>
        
      </item>
    
      <item>
        <title>如何用github + jekyll搭建自己的blog</title>
        <description>&lt;p&gt;本文主要记录一下自己在用jekyll在osX平台搭建个人博客开发环境、部署页面的过程以及遇到的一些坑，&lt;br /&gt;有误之处望请包涵指正。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;p&gt;&lt;img src=&quot;/img/jekyllBuild/octojekyll.png&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;jekyll&quot;&gt;1.jekyll是什么？&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;简单地说jekyll就是一个简单免费的blog生成工具，类似WordPress，但是又不像WordPress一样需要一个php以及mysql部署的后台应用程序。简单来说jekyll可以生成一个静态的blog，它可以部署在Github上，同时也可以绑定自己的域名。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;section&quot;&gt;2.前期准备&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;＊ 一个脚本编辑器 &lt;strong&gt;Sublime Text&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;＊ Terminal(终端)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;＊ Github&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;section-1&quot;&gt;3.买域名&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;这步我没有做，直接附上&lt;a href=&quot;http://jingyan.baidu.com/article/fec4bce20d364bf2618d8b39.html&quot;&gt;传送门&lt;/a&gt;  (怎样购买GoDaddy域名).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;如果没有购买域名，那建站完成之后只能使用github上默认的域名访问自己的blog&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;例如:&lt;a href=&quot;http://answershuto.github.io/&quot;&gt;http://answershuto.github.io/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;github&quot;&gt;4.注册github创建代码仓库&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;h3 id=&quot;githubhttpjingyanbaiducomarticle455a9950abe0ada167277864html&quot;&gt;1.注册github，这个简单直接上个&lt;a href=&quot;http://jingyan.baidu.com/article/455a9950abe0ada167277864.html&quot;&gt;传送门&lt;/a&gt;.&lt;/h3&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;h3 id=&quot;section-2&quot;&gt;2.创建代码仓库&lt;/h3&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;p&gt;[1]登录&lt;a href=&quot;https://github.com&quot;&gt;Github&lt;/a&gt;&lt;/p&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;p&gt;[2]创建代码仓库&lt;/p&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;p&gt;&lt;img src=&quot;/img/jekyllBuild/newRepositery.png&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;p&gt;[3]将仓库名字命名为userName.github.io，之后会用这个域名访问自己的blog，比如我这里使用了&lt;a href=&quot;http://answershuto.github.io/&quot;&gt;answershuto.github.io&lt;/a&gt;&lt;/p&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;p&gt;&lt;img src=&quot;/img/jekyllBuild/RepositeryName.png&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;p&gt;[4]点击Create repository&lt;/p&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;jekyll-1&quot;&gt;5.搭建本地调适环境以及安装jekyll&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;h3 id=&quot;macosxrubyjekyll&quot;&gt;1.由于为的mac环境osX上面已经自带的了Ruby的环境，所以直接安装jekyll&lt;/h3&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;h3 id=&quot;gem-install-jekyll&quot;&gt;2.打开终端，执行  $gem install jekyll&lt;/h3&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;p&gt;第一次搭建环境的时候完全不知道怎么搞啊，运行的时候一直报错，在网上找了好多方法，有的说要用翻墙啊什么的，最后使用了淘宝镜像解决了。&lt;/p&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;h3 id=&quot;jekyll-new-blog--jekyllbloggithubhttpjekyllthemesorggit-cloneforkgithub&quot;&gt;3.在终端执行  $ jekyll new blog  可以新建一个jekyll生成的blog，当然也可以从网上或者github上找一些别人提供的开源模板，效果都不错，提供一个&lt;a href=&quot;http://jekyllthemes.org&quot;&gt;传送门&lt;/a&gt;,用git clone到本地，或者是fork到自己的github上。&lt;/h3&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;h3 id=&quot;githubgithub&quot;&gt;4.将本地项目上传到之前建立的github代码仓库上。(注：发布到Github上后可能需要有一段时间的延迟才可以访问)&lt;/h3&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;p&gt;$git init&lt;/p&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;p&gt;$git add README.md&lt;/p&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;p&gt;$git commit -m “first commit”&lt;/p&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;p&gt;$git remote add origin https://github.com/answershuto/answershuto.github.io.git&lt;/p&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;p&gt;$git push -u origin master&lt;/p&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;h3 id=&quot;usernamegithubioanswershutogithubiohttpanswershutogithubio&quot;&gt;5.在浏览器中输入 userName.github.io即可,例如&lt;a href=&quot;http://answershuto.github.io/&quot;&gt;answershuto.github.io&lt;/a&gt;&lt;/h3&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;h3 id=&quot;section-3&quot;&gt;6.本地调试&lt;/h3&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;p&gt;进入之前jekyll new blog 生成的目录下或者是git clone出来的目录下，&lt;/p&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;p&gt;$cd blog&lt;/p&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;p&gt;执行 $jekyll serve&lt;/p&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;p&gt;在浏览器中输入 localhost:4000  (注：jekyll默认用4000端口，可以在配置中修改该端口号)&lt;/p&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;h3 id=&quot;blogblog&quot;&gt;接下来就可以愉快地修改自己blog的代码，打造一个自己喜欢风格的blog了.&lt;/h3&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;jekyll-2&quot;&gt;6.jekyll博客基本用法&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;h3 id=&quot;jekull&quot;&gt;1.jekull目录结构&lt;/h3&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;p&gt;_site目录是最终自动生成的目录.&lt;/p&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;p&gt;_post目录为存放文章的目录，存放的格式为 年－月－日－题目.MarkDown.&lt;/p&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;p&gt;_layouts目录为布局文件存放目录.&lt;/p&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;p&gt;_includes目录存放一些组件，在其他文件中可以引用该目录中的文件&lt;/p&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;p&gt;_config.yml存储全局配置&lt;/p&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;h3 id=&quot;markdonw-httpwowubuntucommarkdownphilosophy&quot;&gt;2.MarkDonw语法 附上学习&lt;a href=&quot;http://wowubuntu.com/markdown/#philosophy&quot;&gt;传送门&lt;/a&gt;&lt;/h3&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;h3 id=&quot;blog&quot;&gt;3.接下来就可以根据一些前端的支持修改自己的页面，定制自己专属风格的blog。&lt;/h3&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Sun, 10 Apr 2016 23:14:00 +0800</pubDate>
        <link>/jekyll/update/2016/04/10/jekyllBuild.html</link>
        <guid isPermaLink="true">/jekyll/update/2016/04/10/jekyllBuild.html</guid>
        
        <category>jekyll 前端</category>
        
        
        <category>jekyll</category>
        
        <category>update</category>
        
      </item>
    
  </channel>
</rss>
